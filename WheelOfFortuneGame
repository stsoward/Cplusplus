#include "pch.h"
#include <iostream>
#include <string>
#include <cmath>
#include <algorithm>
#include <cctype>
#include <cstdlib>
#include <ctime>
#include <vector>

//to do
//add ai
//maybe fix the win condition for filling
using namespace std;


class wheelGame {
public:
	int userInput;
	const int ALL_PLAYER_COUNT = 4;
	int humanPlayerCount = 0;
	//holds money for each player
	vector <int> playerMoney{ 0, 0, 0, 0 };
	//bool for spinWheel to know whether to skip turn of player or not (1 or 0)
	vector <int> playerSkipTurn{ 0, 0, 0, 0 };
	vector <int> humanPlayersTurn{ 0, 0, 0, 0 };

	;	void start() {
		//Loop to check if player count is valid
		cout << "Welcome to Wheel of Fortune!" << endl;
		cout << "How many players? [1-4]: ";
		do {
			cin >> userInput;
			if (userInput <= 4 && userInput >= 0) {
				humanPlayerCount = userInput;
			}
			else {
				cout << "Nice try, but what you entered wasn't between 1 and 4" << endl << "Try again: ";

			}
		} while (humanPlayerCount != userInput);
		//set which players are human and which are AI
		setPlayers();
		cout << "Here are the basic rules:\n"
			<< "=======================================\n\n"
			<< "Every turn the wheel is spun and lands\n"
			<< "on a space. Depending on the space, you\n"
			<< "will get a chance to guess a consonant \n"
			<< "for the fill-in-the-blank statement.\n"
			<< "There are other spaces that can help\n"
			<< "or hurt you.\n"
			<< "There are ten rounds.\n"
			<< "Win conditions:\n"
			<< "- You guess the phrase correctly\n"
			<< "- You fill in the final letter\n"
			<< "- You have the most money at the end" << endl;

		cout << "Let's play the game!" << endl
			<< "=======================" << endl;
	}



	//function to spin wheel, check if to skip turn, and give or take money

	void spinWheel() {
		bool winCondition = 0;
		//player that won
		int playerWon;
		int selectedWheelNum = 0;
		int range = 24;
		//how many rounds there will be in a game
		int roundCount = 10;
		vector <int> wheelNum{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 , 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 , 22, 23, 24 };
		//set fill in the blank to correct phrase
		blank_phrase(phrase[chosenPhrase]);

		//loop to take turns
		for (int currRound = 0; currRound < roundCount; currRound++) {
			//print out current round
			cout << "======= ROUND " << currRound + 1<< " =======" << endl;
			cout << "FILL IN THE BLANK: " << endl;
			display(guessing_phrase);
			cout << endl << endl;
			for (int i = 0; i < ALL_PLAYER_COUNT; i++)
			{
				//check what range random wheel segment is in
				selectedWheelNum = rand() % range + 1;
				//check if player turn is to be skipped
				playerWon = i;
				if (playerSkipTurn[i] != 1) {
					cout << "Player " << i + 1 << ": " << endl << "You landed on number: " << selectedWheelNum << endl;
					if (selectedWheelNum == 1) {
						//Bankrupt segment
						cout << "You landed on BANKRUPT" << endl;
						playerMoney[i] = 0;
						

					}
					else if (selectedWheelNum > 1 && selectedWheelNum <= 14) {
						//Cash segment
						cout << "You landed on CASH" << endl;
						playerMoney[i] += 200;

						//check if human or AI player
						if (humanPlayersTurn[i] == 1) {
							//set phrase
							consonant_guess();
							guess(letter, phrase[chosenPhrase]);
							display(guessing_phrase);
							//chance to guess phrase
							if (guessPhrase() || compareStrings(currGuessedPhrase, the_phrase))
							{
								winCondition = 1;
								cout << "Great job! \n PLAYER " << playerWon + 1 << " won! " << endl;
								exit(0);
							}
						}
						else {
							//set phrase
							consonant_guessAI();
							guess(letter, phrase[chosenPhrase]);
							display(guessing_phrase);
							//chance to guess phrase
							if (compareStrings(currGuessedPhrase, the_phrase))
							{
								winCondition = 1;
								cout << "Great job! \n PLAYER " << playerWon + 1 << " won! " << endl;
								exit(0);
							}
						}


					}
					else if (selectedWheelNum >= 15 && selectedWheelNum <= 21) {
						//Vowel segment
						cout << "You landed on FREE VOWEL" << endl;
						playerMoney[i] += 200;

						if (humanPlayersTurn[i] == 1)
						{
							//set phrase
							vowel_guess();
							guess(letter, phrase[chosenPhrase]);
							display(guessing_phrase);
							//chance to guess phrase
							if (guessPhrase() || compareStrings(currGuessedPhrase, the_phrase))
							{
								winCondition = 1;
								cout << "Great job! \n PLAYER " << playerWon + 1 << " won! " << endl;

								exit(0);
							}
						}
						else {
							//set phrase
							vowel_guessAI();
							guess(letter, phrase[chosenPhrase]);
							display(guessing_phrase);
							//chance to guess phrase
							if (compareStrings(currGuessedPhrase, the_phrase))
							{
								winCondition = 1;
								cout << "Great job! \n PLAYER " << playerWon + 1 << " won! " << endl;
								exit(0);
							}
						}

					}
					else if (selectedWheelNum == 22) {
						//Lose a turn segment
						cout << "You landed on LOSE NEXT TURN" << endl;
						playerSkipTurn[i] = 1;

						if (humanPlayersTurn[i] == 1) {
							//set phrase
							consonant_guess();
							guess(letter, phrase[chosenPhrase]);
							display(guessing_phrase);
							//chance to guess phrase
							if (guessPhrase() || compareStrings(currGuessedPhrase, the_phrase))
							{
								winCondition = 1;
								cout << "Great job! \n PLAYER " << playerWon + 1<< " won! " << endl;

								exit(0);
							}
						}
						else {
							//set phrase
							consonant_guessAI();
							guess(letter, phrase[chosenPhrase]);
							display(guessing_phrase);
							//chance to guess phrase
							if (compareStrings(currGuessedPhrase, the_phrase))
							{
								winCondition = 1;
								cout << "Great job! \n PLAYER " << playerWon + 1 << " won! " << endl;
								exit(0);
							}
						}
					}
					else if (selectedWheelNum == 23) {
						//Wild Card: Choose a second consonant
						cout << "You landed on WILD CARD [You can guess two consonants]" << endl;

						if (humanPlayersTurn[i] == 1) {
							consonant_guess();
							guess(letter, phrase[chosenPhrase]);
							display(guessing_phrase);

							consonant_guess();
							guess(letter, phrase[chosenPhrase]);
							display(guessing_phrase);

							//chance to guess phrase
							if (guessPhrase() || compareStrings(currGuessedPhrase, the_phrase))
							{
								winCondition = 1;
								cout << "Great job! \n PLAYER " << playerWon + 1 << " won! " << endl;

								exit(0);
							}
						}
						else {
							//set phrase
							consonant_guessAI();
							guess(letter, phrase[chosenPhrase]);
							display(guessing_phrase);
							//set phrase
							consonant_guessAI();
							guess(letter, phrase[chosenPhrase]);
							display(guessing_phrase);
							//chance to guess phrase
							if (compareStrings(currGuessedPhrase, the_phrase))
							{
								winCondition = 1;
								cout << "Great job! \n PLAYER " << playerWon + 1<< " won! " << endl;
								exit(0);
							}
						}
					}
					
					cout << "MONEY: " << playerMoney[i] << endl << endl;
				}

				//If player turn is to be skipped do this:
				else {
					cout << "Player " << i + 1 << ": " << endl << "Your turn is being skipped due to the last round!" << endl;
					cout << "MONEY: " << playerMoney[i] << endl << endl;
					playerSkipTurn[i] = 0;
				}
			}
			cout << "\n\n\n";
			if (winCondition) {
				break;
			}
		}
		if (winCondition) {
			cout << "Wow, great job! \n PLAYER " << playerWon + 1 << " won! " << endl;
		}
		else {
			int altPlayerWin;
			int mostMoney = 0;
			for (int i = 0; i < playerMoney.size(); i++)
			{
				if (playerMoney[i] > mostMoney) {
					mostMoney = playerMoney[i];
				}
				if (playerMoney[i] == mostMoney) {
					altPlayerWin = i + 1;
				}
			}
			cout << "The game has ended and the fill in the blank has not been completed." << endl;
			cout << "Player " << altPlayerWin << " wins for having the most money." << endl;
		}


	}

private:
	char letter;

	vector <string> phrase{ "A Clean Sweep", "Beware Of Dog", "Crazy In Love", "Dawn To Dusk", "Every Penny Counts", "Fair And Square", "Get A Grip", "Half A Dozen", "In The Wild", "Just For Fun", "Keep Your Cool", "Laugh It Off", "Made To Order", "Nerves Of Steel" };
	int chosenPhrase = rand() % phrase.size();
	//Track guessed letters
	vector <char> guessed_letters;
	//Phrase to be guess
	string the_phrase = phrase.at(chosenPhrase);
	//Current progress on guessing the phrase
	string guessing_phrase = phrase.at(chosenPhrase);
	//Player guess at phrase
	vector <string> guessed_phrase;
	//the phrase with the filled in letters
	string currGuessedPhrase;

	bool isConsonant(char c) {
		switch (tolower(c)) {
		case 'b':
		case 'c':
		case 'd':
		case 'f':
		case 'g':
		case 'h':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
			return true;
		default:
			return false;
		}
	}
	//Get user guess consonant
	void consonant_guess() {
		cout << "Please guess a consonant: ";
		//check if letter is consonant and loop if not
		do {
			cin >> letter;
			if (isConsonant(letter)) {
				guessed_letters.push_back(toupper(letter));
				guessed_letters.push_back(' ');
				cout << endl << "You have guessed the letter: " << letter << endl;
			}
			else {
				cout << "That's not a consonant. Try again: ";
			}
		} while (!isConsonant(letter));
	}
	void consonant_guessAI() {
		cout << "Please guess a consonant: ";
		//check if letter is consonant and loop if not
		do {
			comp_guess();
			if (isConsonant(letter)) {
				guessed_letters.push_back(toupper(letter));
				guessed_letters.push_back(' ');
				cout << endl << "You have guessed the letter: " << letter << endl;
			}
			else {
				cout << "That's not a consonant. Try again: ";
			}
		} while (!isConsonant(letter));
	}
	bool isVowel(char c) {
		switch (tolower(c)) {
		case 'a':
		case 'e':
		case 'i':
		case 'o':
		case 'u':
			return true;
		default:
			return false;
		}
	}
	//Get user guess vowel
	void vowel_guess() {
		cout << "Please guess a vowel: ";
		//check if letter is consonant and loop if not
		do {
			cin >> letter;
			if (isVowel(letter)) {
				guessed_letters.push_back(toupper(letter));
				guessed_letters.push_back(' ');
				cout << endl << "You have guessed the letter: " << letter << endl;
			}
			else {
				cout << "That's not a vowel. Try again: ";
			}
		} while (!isVowel(letter));
	}
	void vowel_guessAI() {
		cout << "Please guess a vowel: ";
		//check if letter is consonant and loop if not
		do {
			comp_guess();
			if (isVowel(letter)) {
				guessed_letters.push_back(toupper(letter));
				guessed_letters.push_back(' ');
				cout << endl << "You have guessed the letter: " << letter << endl;
			}
			else {
				cout << "That's not a vowel. Try again: ";
			}
		} while (!isVowel(letter));
	}

	//set human players
	void setPlayers() {
		for (int i = 0; i < humanPlayerCount; i++) 
		{
			humanPlayersTurn.at(i) = 1;
		
		}
		//Uncomment for troubleshooting
		/*for (int i = 0; i < humanPlayersTurn.size(); i++)
		{
			cout << humanPlayersTurn[i];
		}*/
		cout << endl;
	}


	//AI random letter guess
	void comp_guess() {
		int x = rand() % 26;
		letter = 'A' + x;

	}

	//Set Phrase to blanks "_"
	void blank_phrase(string the_phrase) {
		for (int i = 0; i < the_phrase.size(); i++) {
			if (the_phrase.at(i) == ' ') {
				guessing_phrase.at(i) = ' ';
			}
			else {
				guessing_phrase.at(i) = '_';
			}
		}
	}

	//Compare guess letter to phrase
	void guess(char letter, string the_phrase) {
		letter = tolower(letter);
		for (int i = 0; i < the_phrase.size(); i++) {
			if (the_phrase.at(i) == letter || the_phrase.at(i) == toupper(letter)) {
				guessing_phrase.at(i) = the_phrase.at(i);
				currGuessedPhrase = guessing_phrase;
			}
		}
	}
	//ask if player wants to guess the current and check if it's right
	bool guessPhrase()
	{
		bool guessCorrect = 0;
		char input;
		string inputGuess;
		bool invalidInput = 0;
		cout << "Do you want to guess the phrase? [y/n]: ";
		//check for valid input
		do{
				cin >> input;
				tolower(input);
				if (input == 'y') {
					cout << "What is your guess: ";
					cin.ignore();
					getline(cin, inputGuess);
					guessed_phrase.push_back(inputGuess);
					//Uncomment to test input
						/*cout << "you guessed: ";
						for (int j = 0; j < guessed_phrase.size(); j++) {
							cout << guessed_phrase[j];
						}*/
					cout << endl;

					

					//check if phrases match
					if (compareStrings(inputGuess, the_phrase)) {
						cout << "WOW YOU GUESSED IT!" << endl;
						guessCorrect = 1;
						break;
					}
					else {
						cout << "Wrong guess" << endl;
						guessCorrect = 0;
						break;
						
					}

				}
				else if (input == 'n') {
					break;
				}
				else {
					invalidInput = 1;
					cout << "INVALID INPUT. Try again: ";
				}
			}
			while (invalidInput = 1);

			//return whether the guess was correct
			return guessCorrect;
	}
	//compare strings ignoring cases
	bool compareStrings(string str1, string str2) {
		string compStr1 = str1;
		string compStr2 = str2;
		transform(compStr1.begin(), compStr1.end(), compStr1.begin(), ::tolower);
		transform(compStr2.begin(), compStr2.end(), compStr2.begin(), ::tolower);
		//uncomment to test
		/*cout << compStr1 << "           " << compStr2;
		cout << compStr1.size() << "           " << compStr2.size();*/
		if (compStr1 == compStr2) {
			return true;
		}
		else {
			return false;
		}
		
	}

	//Display Function
	void display(string the_phrase_to_display) {
		for (int i = 0; i < the_phrase_to_display.size(); i++) {
			cout << the_phrase_to_display.at(i);
		}
		cout << endl;
	}
};

int main() {

	srand(time(0));
	//makes a new game
	wheelGame newGame;
	//starting sequence
	newGame.start();
	//actual game
	newGame.spinWheel();
	return 0;

}
